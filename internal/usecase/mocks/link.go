// Code generated by MockGen. DO NOT EDIT.
// Source: short-link/internal/usecase (interfaces: LinkRepository,TokenCache,Generator)

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	entities "short-link/internal/entities"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockLinkRepository is a mock of LinkRepository interface.
type MockLinkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLinkRepositoryMockRecorder
}

// MockLinkRepositoryMockRecorder is the mock recorder for MockLinkRepository.
type MockLinkRepositoryMockRecorder struct {
	mock *MockLinkRepository
}

// NewMockLinkRepository creates a new mock instance.
func NewMockLinkRepository(ctrl *gomock.Controller) *MockLinkRepository {
	mock := &MockLinkRepository{ctrl: ctrl}
	mock.recorder = &MockLinkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkRepository) EXPECT() *MockLinkRepositoryMockRecorder {
	return m.recorder
}

// GetLink mocks base method.
func (m *MockLinkRepository) GetLink(arg0 string) (*entities.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLink", arg0)
	ret0, _ := ret[0].(*entities.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLink indicates an expected call of GetLink.
func (mr *MockLinkRepositoryMockRecorder) GetLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLink", reflect.TypeOf((*MockLinkRepository)(nil).GetLink), arg0)
}

// GetLinkByOriginal mocks base method.
func (m *MockLinkRepository) GetLinkByOriginal(arg0 string) (*entities.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkByOriginal", arg0)
	ret0, _ := ret[0].(*entities.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkByOriginal indicates an expected call of GetLinkByOriginal.
func (mr *MockLinkRepositoryMockRecorder) GetLinkByOriginal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkByOriginal", reflect.TypeOf((*MockLinkRepository)(nil).GetLinkByOriginal), arg0)
}

// ShutDown mocks base method.
func (m *MockLinkRepository) ShutDown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutDown")
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutDown indicates an expected call of ShutDown.
func (mr *MockLinkRepositoryMockRecorder) ShutDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutDown", reflect.TypeOf((*MockLinkRepository)(nil).ShutDown))
}

// StartRecalculation mocks base method.
func (m *MockLinkRepository) StartRecalculation(arg0 time.Duration, arg1 chan []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartRecalculation", arg0, arg1)
}

// StartRecalculation indicates an expected call of StartRecalculation.
func (mr *MockLinkRepositoryMockRecorder) StartRecalculation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecalculation", reflect.TypeOf((*MockLinkRepository)(nil).StartRecalculation), arg0, arg1)
}

// StoreLink mocks base method.
func (m *MockLinkRepository) StoreLink(arg0 *entities.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLink", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLink indicates an expected call of StoreLink.
func (mr *MockLinkRepositoryMockRecorder) StoreLink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLink", reflect.TypeOf((*MockLinkRepository)(nil).StoreLink), arg0)
}

// MockTokenCache is a mock of TokenCache interface.
type MockTokenCache struct {
	ctrl     *gomock.Controller
	recorder *MockTokenCacheMockRecorder
}

// MockTokenCacheMockRecorder is the mock recorder for MockTokenCache.
type MockTokenCacheMockRecorder struct {
	mock *MockTokenCache
}

// NewMockTokenCache creates a new mock instance.
func NewMockTokenCache(ctrl *gomock.Controller) *MockTokenCache {
	mock := &MockTokenCache{ctrl: ctrl}
	mock.recorder = &MockTokenCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenCache) EXPECT() *MockTokenCacheMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockTokenCache) Exists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockTokenCacheMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockTokenCache)(nil).Exists), arg0)
}

// SetRecalculationChan mocks base method.
func (m *MockTokenCache) SetRecalculationChan(arg0 chan []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRecalculationChan", arg0)
}

// SetRecalculationChan indicates an expected call of SetRecalculationChan.
func (mr *MockTokenCacheMockRecorder) SetRecalculationChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRecalculationChan", reflect.TypeOf((*MockTokenCache)(nil).SetRecalculationChan), arg0)
}

// Store mocks base method.
func (m *MockTokenCache) Store(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", arg0)
}

// Store indicates an expected call of Store.
func (mr *MockTokenCacheMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockTokenCache)(nil).Store), arg0)
}

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// GenString mocks base method.
func (m *MockGenerator) GenString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenString indicates an expected call of GenString.
func (mr *MockGeneratorMockRecorder) GenString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenString", reflect.TypeOf((*MockGenerator)(nil).GenString))
}
